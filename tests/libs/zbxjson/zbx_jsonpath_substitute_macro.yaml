---
test case: macro contains full JsonPath expression
in:
  path: '{#M}'
  value: '$.a.b.c'
out:
  result: '$.a.b.c'
---
test case: macro at the beginning of expression
in:
  path: '{#M}.id'
  value: '$.a'
out:
  result: '$.a.id'
---
test case: macro as index expression
in:
  path: '$.{#M}.id'
  value: '[1]'
out:
  result: '$.[''[1]''].id'
---
test case: macro between dots $.{#M}.test
in:
  path: '$.{#M}.id'
  value: '[1]'
out:
  result: '$.[''[1]''].id'
---
test case: macro (<empty>) between dots $.{#M}.id
in:
  path: '$.{#M}.id'
  value: ''
out:
  result: '$..id'
---
test case: macro (a) between dots $.{#M}.id
in:
  path: '$.{#M}.id'
  value: 'a'
out:
  result: '$.a.id'
---
test case: macro (a.b.c) between dots $.{#M}.id
in:
  path: '$.{#M}.id'
  value: 'a.b.c'
out:
  result: '$.[''a.b.c''].id'
---
test case: macro ('a.b.c') between dots $.{#M}.id
in:
  path: '$.{#M}.id'
  value: '''a.b.c'''
out:
  result: '$.[''\''a.b.c\''''].id'
---
test case: macro ("a.b.c") between dots $.{#M}.id
in:
  path: '$.{#M}.id'
  value: '"a.b.c"'
out:
  result: '$.[''"a.b.c"''].id'
---
test case: macro (a'c) between dots $.{#M}.id
in:
  path: '$.{#M}.id'
  value: 'a''c'
out:
  result: '$.[''a\''c''].id'
---
test case: macro (*) between dots $.{#M}.id
in:
  path: '$.{#M}.id'
  value: '*'
out:
  result: '$.[''*''].id'
---
test case: macro (\) between dots $.{#M}.id
in:
  path: '$.{#M}.id'
  value: '\'
out:
  result: '$.[''\\''].id'
---
test case: macro (5) between dots $.{#M}.id
in:
  path: '$.{#M}.id'
  value: '5'
out:
  result: '$.[5].id'
---
test case: macro (1.5) between dots $.{#M}.id
in:
  path: '$.{#M}.id'
  value: '1.5'
out:
  result: '$.[''1.5''].id'
---
test case: macro (a) in expression after dot $..book[?(@.{#M}<10)]
in:
  path: '$..book[?(@.{#M}<10)]'
  value: 'a'
out:
  result: '$..book[?(@.a<10)]'
---
test case: macro (a.b.c) in expression after dot $..book[?(@.{#M}<10)]
in:
  path: '$..book[?(@.{#M}<10)]'
  value: 'a.b.c'
out:
  result: '$..book[?(@.[''a.b.c'']<10)]'
---
test case: macro ('a.b.c') in expression after dot $..book[?(@.{#M}<10)]
in:
  path: '$..book[?(@.{#M}<10)]'
  value: '''a.b.c'''
out:
  result: '$..book[?(@.[''\''a.b.c\'''']<10)]'
---
test case: macro ("a.b.c") in expression after dot $..book[?(@.{#M}<10)]
in:
  path: '$..book[?(@.{#M}<10)]'
  value: '"a.b.c"'
out:
  result: '$..book[?(@.[''"a.b.c"'']<10)]'
---
test case: macro (a'c) in expression after dot $..book[?(@.{#M}<10)]
in:
  path: '$..book[?(@.{#M}<10)]'
  value: 'a''c'
out:
  result: '$..book[?(@.[''a\''c'']<10)]'
---
test case: macro (*) in expression after dot $..book[?(@.{#M}<10)]
in:
  path: '$..book[?(@.{#M}<10)]'
  value: '*'
out:
  result: '$..book[?(@.[''*'']<10)]'
---
test case: macro (\) in expression after dot $..book[?(@.{#M}<10)]
in:
  path: '$..book[?(@.{#M}<10)]'
  value: '\'
out:
  result: '$..book[?(@.[''\\'']<10)]'
---
test case: macro (5) in expression after dot $..book[?(@.{#M}<10)]
in:
  path: '$..book[?(@.{#M}<10)]'
  value: '5'
out:
  result: '$..book[?(@.[5]<10)]'
---
test case: macro (1.5) in expression after dot $..book[?(@.{#M}<10)]
in:
  path: '$..book[?(@.{#M}<10)]'
  value: '1.5'
out:
  result: '$..book[?(@.[''1.5'']<10)]'
---
test case: macro (<empty>) after square bracket $.[{#M}]
in:
  path: '$.[{#M}]'
  value: ''
out:
  result: '$.['''']'
---
test case: macro (a) after square bracket $.[{#M}]
in:
  path: '$.[{#M}]'
  value: 'a'
out:
  result: '$.[''a'']'
---
test case: macro (a.b.c) after square bracket $.[{#M}]
in:
  path: '$.[{#M}]'
  value: 'a.b.c'
out:
  result: '$.[''a.b.c'']'
---
test case: macro ('a.b.c') after square bracket $.[{#M}]
in:
  path: '$.[{#M}]'
  value: '''a.b.c'''
out:
  result: '$.[''\''a.b.c\'''']'
---
test case: macro ("a.b.c") after square bracket $.[{#M}]
in:
  path: '$.[{#M}]'
  value: '"a.b.c"'
out:
  result: '$.[''"a.b.c"'']'
---
test case: macro (aâ€™c) after square bracket $.[{#M}]
in:
  path: '$.[{#M}]'
  value: 'a''c'
out:
  result: '$.[''a\''c'']'
---
test case: macro (*) after square bracket $.[{#M}]
in:
  path: '$.[{#M}]'
  value: '*'
out:
  result: '$.[''*'']'
---
test case: macro (a\b) after square bracket $.[{#M}]
in:
  path: '$.[{#M}]'
  value: 'a\b'
out:
  result: '$.[''a\\b'']'
---
test case: macro (5) after square bracket $.[{#M}]
in:
  path: '$.[{#M}]'
  value: '5'
out:
  result: '$.[5]'
---
test case: macro (1.5) after square bracket $.[{#M}]
in:
  path: '$.[{#M}]'
  value: '1.5'
out:
  result: '$.[''1.5'']'
---
test case: macro (a\c) after square bracket $.['[{#M}]']
in:
  path: '$.[''[{#M}]'']'
  value: 'a\c'
out:
  result: '$.[''[a\\c]'']'
---
test case: macro (a) in expression left operand $..book[?({#M}==@.category)]
in:
  path: '$..book[?({#M}==@.category)]'
  value: 'a'
out:
  result: '$..book[?(''a''==@.category)]'
---
test case: macro (a.b.c) in expression left operand $..book[?({#M}==@.category)]
in:
  path: '$..book[?({#M}==@.category)]'
  value: 'a.b.c'
out:
  result: '$..book[?(''a.b.c''==@.category)]'
---
test case: macro ('a.b.c') in expression left operand $..book[?({#M}==@.category)]
in:
  path: '$..book[?({#M}==@.category)]'
  value: '''a.b.c'''
out:
  result: '$..book[?(''\''a.b.c\''''==@.category)]'
---
test case: macro ("a.b.c") in expression left operand $..book[?({#M}==@.category)]
in:
  path: '$..book[?({#M}==@.category)]'
  value: '"a.b.c"'
out:
  result: '$..book[?(''"a.b.c"''==@.category)]'
---
test case: macro (a'c) in expression left operand $..book[?({#M}==@.category)]
in:
  path: '$..book[?({#M}==@.category)]'
  value: 'a''c'
out:
  result: '$..book[?(''a\''c''==@.category)]'
---
test case: macro (*) in expression left operand $..book[?({#M}==@.category)]
in:
  path: '$..book[?({#M}==@.category)]'
  value: '*'
out:
  result: '$..book[?(''*''==@.category)]'
---
test case: macro (\) in expression left operand $..book[?({#M}==@.category)]
in:
  path: '$..book[?({#M}==@.category)]'
  value: '\'
out:
  result: '$..book[?(''\\''==@.category)]'
---
test case: macro (5) in expression left operand $..book[?({#M}==@.category)]
in:
  path: '$..book[?({#M}==@.category)]'
  value: '5'
out:
  result: '$..book[?(5==@.category)]'
---
test case: macro (1.5) in expression left operand $..book[?({#M}==@.category)]
in:
  path: '$..book[?({#M}==@.category)]'
  value: '1.5'
out:
  result: '$..book[?(1.5==@.category)]'
---
test case: macro (a) in expression right operand $..book[?(@.category=={#M})]
in:
  path: '$..book[?(@.category=={#M})]'
  value: 'a'
out:
  result: '$..book[?(@.category==''a'')]'
---
test case: macro (a.b.c) in expression right operand $..book[?(@.category=={#M})]
in:
  path: '$..book[?(@.category=={#M})]'
  value: 'a.b.c'
out:
  result: '$..book[?(@.category==''a.b.c'')]'
---
test case: macro ('a.b.c') in expression right operand $..book[?(@.category=={#M})]
in:
  path: '$..book[?(@.category=={#M})]'
  value: '''a.b.c'''
out:
  result: '$..book[?(@.category==''\''a.b.c\'''')]'
---
test case: macro ("a.b.c") in expression right operand $..book[?(@.category=={#M})]
in:
  path: '$..book[?(@.category=={#M})]'
  value: '"a.b.c"'
out:
  result: '$..book[?(@.category==''"a.b.c"'')]'
---
test case: macro (a'c) in expression right operand $..book[?(@.category=={#M})]
in:
  path: '$..book[?(@.category=={#M})]'
  value: 'a''c'
out:
  result: '$..book[?(@.category==''a\''c'')]'
---
test case: macro (*) in expression right operand $..book[?(@.category=={#M})]
in:
  path: '$..book[?(@.category=={#M})]'
  value: '*'
out:
  result: '$..book[?(@.category==''*'')]'
---
test case: macro (\) in expression right operand $..book[?(@.category=={#M})]
in:
  path: '$..book[?(@.category=={#M})]'
  value: '\'
out:
  result: '$..book[?(@.category==''\\'')]'
---
test case: macro (5) in expression right operand $..book[?(@.category=={#M})]
in:
  path: '$..book[?(@.category=={#M})]'
  value: '5'
out:
  result: '$..book[?(@.category==5)]'
---
test case: macro (1.5) in expression right operand $..book[?(@.category=={#M})]
in:
  path: '$..book[?(@.category=={#M})]'
  value: '1.5'
out:
  result: '$..book[?(@.category==1.5)]'
---
test case: macro (a) in expression right operand $..book[?(@.a < {#M})]
in:
  path: '$..book[?(@.a < {#M})]'
  value: 'a'
out:
  result: '$..book[?(@.a < ''a'')]'
---
test case: macro (a.b.c) in expression right operand $..book[?(@.a < {#M})]
in:
  path: '$..book[?(@.a < {#M})]'
  value: 'a.b.c'
out:
  result: '$..book[?(@.a < ''a.b.c'')]'
---
test case: macro ('a.b.c') in expression right operand $..book[?(@.a < {#M})]
in:
  path: '$..book[?(@.a < {#M})]'
  value: '''a.b.c'''
out:
  result: '$..book[?(@.a < ''\''a.b.c\'''')]'
---
test case: macro ("a.b.c") in expression right operand $..book[?(@.a < {#M})]
in:
  path: '$..book[?(@.a < {#M})]'
  value: '"a.b.c"'
out:
  result: '$..book[?(@.a < ''"a.b.c"'')]'
---
test case: macro (a'c) in expression right operand $..book[?(@.a < {#M})]
in:
  path: '$..book[?(@.a < {#M})]'
  value: 'a''c'
out:
  result: '$..book[?(@.a < ''a\''c'')]'
---
test case: macro (*) in expression right operand $..book[?(@.a < {#M})]
in:
  path: '$..book[?(@.a < {#M})]'
  value: '*'
out:
  result: '$..book[?(@.a < ''*'')]'
---
test case: macro (a\b) in expression right operand $..book[?(@.a < {#M})]
in:
  path: '$..book[?(@.a < {#M})]'
  value: 'a\b'
out:
  result: '$..book[?(@.a < ''a\\b'')]'
---
test case: macro (5) in expression right operand $..book[?(@.a < {#M})]
in:
  path: '$..book[?(@.a < {#M})]'
  value: '5'
out:
  result: '$..book[?(@.a < 5)]'
---
test case: macro (1.5) in expression right operand $..book[?(@.a < {#M})]
in:
  path: '$..book[?(@.a < {#M})]'
  value: '1.5'
out:
  result: '$..book[?(@.a < 1.5)]'
---
test case: macro (-1e-2) in expression right operand $..book[?(@.a < {#M})]
in:
  path: '$..book[?(@.a < {#M})]'
  value: '-1e-2'
out:
  result: '$..book[?(@.a < -1e-2)]'
---
test case: macro (5) in expression right operand $..book[(@.length-{#M})]
in:
  path: '$..book[(@.length-{#M})]'
  value: '5'
out:
  result: '$..book[(@.length-5)]'
---
test case: macro (1.5) in expression right operand $..book[(@.length-{#M})]
in:
  path: '$..book[(@.length-{#M})]'
  value: '1.5'
out:
  result: '$..book[(@.length-1.5)]'
---
test case: macro (<empty>) in quoted string $.['_{#M}_']
in:
  path: '$.[''_{#M}_'']'
  value: ''
out:
  result: '$.[''__'']'
---
test case: macro (a) in quoted string $.['_{#M}_']
in:
  path: '$.[''_{#M}_'']'
  value: 'a'
out:
  result: '$.[''_a_'']'
---
test case: macro (a.b.c) in quoted string $.['_{#M}_']
in:
  path: '$.[''_{#M}_'']'
  value: 'a.b.c'
out:
  result: '$.[''_a.b.c_'']'
---
test case: macro ('a.b.c') in quoted string $.['_{#M}_']
in:
  path: '$.[''_{#M}_'']'
  value: '''a.b.c'''
out:
  result: '$.[''_\''a.b.c\''_'']'
---
test case: macro ("a.b.c") in quoted string $.['_{#M}_']
in:
  path: '$.[''_{#M}_'']'
  value: '"a.b.c"'
out:
  result: '$.[''_"a.b.c"_'']'
---
test case: macro (a'c) in quoted string $.['_{#M}_']
in:
  path: '$.[''_{#M}_'']'
  value: 'a''c'
out:
  result: '$.[''_a\''c_'']'
---
test case: macro (*) in quoted string $.['_{#M}_']
in:
  path: '$.[''_{#M}_'']'
  value: '*'
out:
  result: '$.[''_*_'']'
---
test case: macro (a\b) in quoted string $.['_{#M}_']
in:
  path: '$.[''_{#M}_'']'
  value: 'a\b'
out:
  result: '$.[''_a\\b_'']'
---
test case: macro (5) in quoted string $.['_{#M}_']
in:
  path: '$.[''_{#M}_'']'
  value: '5'
out:
  result: '$.[''_5_'']'
---
test case: macro (-1e-2) in quoted string $.['_{#M}_']
in:
  path: '$.[''_{#M}_'']'
  value: '-1e-2'
out:
  result: '$.[''_-1e-2_'']'
---
test case: macro (a\c) in quoted string $.['${#M}']
in:
  path: '$.[''${#M}'']'
  value: 'a\c'
out:
  result: '$.[''$a\\c'']'
---
test case: macro (a\c) in quoted string after dot $.['.{#M}'].id
in:
  path: '$.[''.{#M}''].id'
  value: 'a\c'
out:
  result: '$.[''.a\\c''].id'
---
test case: macro (<empty>) in quoted string $.["_{#M}_"]
in:
  path: '$.["_{#M}_"]'
  value: ''
out:
  result: '$.["__"]'
---
test case: macro (a) in quoted string $.["_{#M}_"]
in:
  path: '$.["_{#M}_"]'
  value: 'a'
out:
  result: '$.["_a_"]'
---
test case: macro (a.b.c) in quoted string $.["_{#M}_"]
in:
  path: '$.["_{#M}_"]'
  value: 'a.b.c'
out:
  result: '$.["_a.b.c_"]'
---
test case: macro ('a.b.c') in quoted string $.["_{#M}_"]
in:
  path: '$.["_{#M}_"]'
  value: '''a.b.c'''
out:
  result: '$.["_''a.b.c''_"]'
---
test case: macro ("a.b.c") in quoted string $.["_{#M}_"]
in:
  path: '$.["_{#M}_"]'
  value: '"a.b.c"'
out:
  result: '$.["_\"a.b.c\"_"]'
---
test case: macro (a'c) in quoted string $.["_{#M}_"]
in:
  path: '$.["_{#M}_"]'
  value: 'a''c'
out:
  result: '$.["_a''c_"]'
---
test case: macro (*) in quoted string $.["_{#M}_"]
in:
  path: '$.["_{#M}_"]'
  value: '*'
out:
  result: '$.["_*_"]'
---
test case: macro (a\b) in quoted string $.["_{#M}_"]
in:
  path: '$.["_{#M}_"]'
  value: 'a\b'
out:
  result: '$.["_a\\b_"]'
---
test case: macro (5) in quoted string $.["_{#M}_"]
in:
  path: '$.["_{#M}_"]'
  value: '5'
out:
  result: '$.["_5_"]'
---
test case: macro (-1e-2) in quoted string $.["_{#M}_"]
in:
  path: '$.["_{#M}_"]'
  value: '-1e-2'
out:
  result: '$.["_-1e-2_"]'
---
test case: macro (a\c) in quoted string $.["${#M}"]
in:
  path: '$.["${#M}"]'
  value: 'a\c'
out:
  result: '$.["$a\\c"]'
---
test case: macro (a\c) in quoted string after dot $.[".{#M}"].id
in:
  path: '$.[''.{#M}''].id'
  value: 'a\c'
out:
  result: '$.[''.a\\c''].id'
---
test case: macro (a) at statement beginning ${#M}
in:
  path: '${#M}'
  value: 'a'
out:
  result: '$[''a'']'
---
test case: macro (a.b.c) at statement beginning ${#M}
in:
  path: '${#M}'
  value: 'a.b.c'
out:
  result: '$[''a.b.c'']'
---
test case: macro ('a.b.c') at statement beginning ${#M}
in:
  path: '${#M}'
  value: '''a.b.c'''
out:
  result: '$[''\''a.b.c\'''']'
---
test case: macro ("a.b.c") at statement beginning ${#M}
in:
  path: '${#M}'
  value: '"a.b.c"'
out:
  result: '$[''"a.b.c"'']'
---
test case: macro (a'c) at statement beginning ${#M}
in:
  path: '${#M}'
  value: 'a''c'
out:
  result: '$[''a\''c'']'
---
test case: macro (*) at statement beginning ${#M}
in:
  path: '${#M}'
  value: '*'
out:
  result: '$[''*'']'
---
test case: macro (a\b) at statement beginning ${#M}
in:
  path: '${#M}'
  value: 'a\b'
out:
  result: '$[''a\\b'']'
---
test case: macro (5) at statement beginning ${#M}
in:
  path: '${#M}'
  value: '5'
out:
  result: '$[5]'
---
test case: macro (-1e-2) at statement beginning ${#M}
in:
  path: '${#M}'
  value: '-1e-2'
out:
  result: '$[''-1e-2'']'
---
test case: macro (a) in expression right operand single quoted $..book[?(@.a < '{#M}')]
in:
  path: '$..book[?(@.a < ''{#M}'')]'
  value: 'a'
out:
  result: '$..book[?(@.a < ''a'')]'
---
test case: macro (a.b.c) in expression right operand single quoted $..book[?(@.a < '{#M}')]
in:
  path: '$..book[?(@.a < ''{#M}'')]'
  value: 'a.b.c'
out:
  result: '$..book[?(@.a < ''a.b.c'')]'
---
test case: macro ('a.b.c') in expression right operand single quoted $..book[?(@.a < '{#M}')]
in:
  path: '$..book[?(@.a < ''{#M}'')]'
  value: '''a.b.c'''
out:
  result: '$..book[?(@.a < ''\''a.b.c\'''')]'
---
test case: macro ("a.b.c") in expression right operand single quoted $..book[?(@.a < '{#M}')]
in:
  path: '$..book[?(@.a < ''{#M}'')]'
  value: '"a.b.c"'
out:
  result: '$..book[?(@.a < ''"a.b.c"'')]'
---
test case: macro (a'c) in expression right operand single quoted $..book[?(@.a < '{#M}')]
in:
  path: '$..book[?(@.a < ''{#M}'')]'
  value: 'a''c'
out:
  result: '$..book[?(@.a < ''a\''c'')]'
---
test case: macro (*) in expression right operand single quoted $..book[?(@.a < '{#M}')]
in:
  path: '$..book[?(@.a < ''{#M}'')]'
  value: '*'
out:
  result: '$..book[?(@.a < ''*'')]'
---
test case: macro (a\b) in expression right operand single quoted $..book[?(@.a < '{#M}')]
in:
  path: '$..book[?(@.a < ''{#M}'')]'
  value: 'a\b'
out:
  result: '$..book[?(@.a < ''a\\b'')]'
---
test case: macro (5) in expression right operand single quoted $..book[?(@.a < '{#M}')]
in:
  path: '$..book[?(@.a < ''{#M}'')]'
  value: '5'
out:
  result: '$..book[?(@.a < ''5'')]'
---
test case: macro (-1e-2) in expression right operand single quoted $..book[?(@.a < '{#M}')]
in:
  path: '$..book[?(@.a < ''{#M}'')]'
  value: '-1e-2'
out:
  result: '$..book[?(@.a < ''-1e-2'')]'
---
test case: macro (a) in expression right operand double quoted $..book[?(@.a < "{#M}")]
in:
  path: '$..book[?(@.a < "{#M}")]'
  value: 'a'
out:
  result: '$..book[?(@.a < "a")]'
---
test case: macro (a.b.c) in expression right operand double quoted $..book[?(@.a < "{#M}")]
in:
  path: '$..book[?(@.a < "{#M}")]'
  value: 'a.b.c'
out:
  result: '$..book[?(@.a < "a.b.c")]'
---
test case: macro ('a.b.c') in expression right operand double quoted $..book[?(@.a < "{#M}")]
in:
  path: '$..book[?(@.a < "{#M}")]'
  value: '''a.b.c'''
out:
  result: '$..book[?(@.a < "''a.b.c''")]'
---
test case: macro ("a.b.c") in expression right operand double quoted $..book[?(@.a < "{#M}")]
in:
  path: '$..book[?(@.a < "{#M}")]'
  value: '"a.b.c"'
out:
  result: '$..book[?(@.a < "\"a.b.c\"")]'
---
test case: macro (a'c) in expression right operand double quoted $..book[?(@.a < "{#M}")]
in:
  path: '$..book[?(@.a < "{#M}")]'
  value: 'a''c'
out:
  result: '$..book[?(@.a < "a''c")]'
---
test case: macro (*) in expression right operand double quoted $..book[?(@.a < "{#M}")]
in:
  path: '$..book[?(@.a < "{#M}")]'
  value: '*'
out:
  result: '$..book[?(@.a < "*")]'
---
test case: macro (a\b) in expression right operand double quoted $..book[?(@.a < "{#M}")]
in:
  path: '$..book[?(@.a < "{#M}")]'
  value: 'a\b'
out:
  result: '$..book[?(@.a < "a\\b")]'
---
test case: macro (5) in expression right operand double quoted $..book[?(@.a < "{#M}")]
in:
  path: '$..book[?(@.a < "{#M}")]'
  value: '5'
out:
  result: '$..book[?(@.a < "5")]'
---
test case: macro (-1e-2) in expression right operand double quoted $..book[?(@.a < "{#M}")]
in:
  path: '$..book[?(@.a < "{#M}")]'
  value: '-1e-2'
out:
  result: '$..book[?(@.a < "-1e-2")]'
---
test case: macro (-15) as negative index $.books[{#M}].author
in:
  path: '$.books[{#M}].author'
  value: '-15'
out:
  result: '$.books[-15].author'
---
test case: macro (-1.5) as negative floating index $.books[{#M}].author
in:
  path: '$.books[{#M}].author'
  value: '-1.5'
out:
  result: '$.books[''-1.5''].author'
---
test case: macro (123) as name part $.books{#M}.author
in:
  path: '$.books{#M}.author'
  value: '123'
out:
  result: '$.books123.author'
---
test case: macro (abc) as name part $.books{#M}.author
in:
  path: '$.books{#M}.author'
  value: 'abc'
out:
  result: '$.booksabc.author'
---
test case: macro (12) in filter expression $.tags[{#M}:]
in:
  path: '$.tags[{#M}:]'
  value: '12'
out:
  result: '$.tags[12:]'
---
test case: macro (34) in filter expression $.tags[:{#M}]
in:
  path: '$.tags[:{#M}]'
  value: '34'
out:
  result: '$.tags[:34]'
---
test case: macro (12) in filter expression $.tags[{#M}:34]
in:
  path: '$.tags[{#M}:34]'
  value: '12'
out:
  result: '$.tags[12:34]'
---
test case: macro (34) in filter expression $.tags[12:{#M}]
in:
  path: '$.tags[12:{#M}]'
  value: '34'
out:
  result: '$.tags[12:34]'
---
test case: macro (-12) in filter expression $.tags[{#M}:-11]
in:
  path: '$.tags[{#M}:-11]'
  value: '-12'
out:
  result: '$.tags[-12:-11]'
---
test case: macro (-11) in filter expression $.tags[-12:{#M}]
in:
  path: '$.tags[-12:{#M}]'
  value: '-11'
out:
  result: '$.tags[-12:-11]'
---
test case: macro (5) in index list $.books[0, {#M}, 7].title
in:
  path: '$.books[0, {#M}, 7].title'
  value: '5'
out:
  result: '$.books[0, 5, 7].title'
---
test case: macro (name) in subexpression $.books[?(@.category == $.{#M})].title
in:
  path: '$.books[?(@.category == $.{#M})].title'
  value: 'name'
out:
  result: '$.books[?(@.category == $.name)].title'
---
test case: macro (a\b) in subexpression $.books[?(@.category == $.{#M})].title
in:
  path: '$.books[?(@.category == $.{#M})].title'
  value: 'a\b'
out:
  result: '$.books[?(@.category == $.[''a\\b''])].title'
---
test case: macro (5) in subexpression $.books[?(@.category == $.{#M})].title
in:
  path: '$.books[?(@.category == $.{#M})].title'
  value: '5'
out:
  result: '$.books[?(@.category == $.[5])].title'
---
test case: macro (id) in subexpression $[?(@.{#M})].id
in:
  path: '$[?(@.{#M})].id'
  value: 'id'
out:
  result: '$[?(@.id)].id'
---
test case: macro (i\d) in subexpression $[?(@.{#M})].id
in:
  path: '$[?(@.{#M})].id'
  value: 'i\d'
out:
  result: '$[?(@.[''i\\d''])].id'
---
test case: macro (-1.5) in subexpression $[?(@.{#M})].id
in:
  path: '$[?(@.{#M})].id'
  value: '-1.5'
out:
  result: '$[?(@.[''-1.5''])].id'
---
test case: macro (5) in subexpression $[?(@.{#M})].id
in:
  path: '$[?(@.{#M})].id'
  value: '5'
out:
  result: '$[?(@.[5])].id'
---
test case: macro (5) in subexpression $[?($.a + {#M} == 3)]
in:
  path: '$[?($.a + {#M} == 3)]'
  value: '5'
out:
  result: '$[?($.a + 5 == 3)]'
---
test case: macro (5) in subexpression $[?(@.['a{#M}'] == 5)].id
in:
  path: '$[?(@.[''a{#M}''] == 5)].id'
  value: '5'
out:
  result: '$[?(@.[''a5''] == 5)].id'
---
test case: macro (b) in subexpression $[?(@.['a{#M}'] == 5)].id
in:
  path: '$[?(@.[''a{#M}''] == 5)].id'
  value: 'b'
out:
  result: '$[?(@.[''ab''] == 5)].id'
---
test case: macro (\b') in subexpression $[?(@.['a{#M}'] == 5)].id
in:
  path: '$[?(@.[''a{#M}''] == 5)].id'
  value: '\b'''
out:
  result: '$[?(@.[''a\\b\''''] == 5)].id'
---
test case: macro (5) in subexpression $[?(@.["a{#M}"] == 5)].id
in:
  path: '$[?(@.["a{#M}"] == 5)].id'
  value: '5'
out:
  result: '$[?(@.["a5"] == 5)].id'
---
test case: macro (b) in subexpression $[?(@.["a{#M}"] == 5)].id
in:
  path: '$[?(@.["a{#M}"] == 5)].id'
  value: 'b'
out:
  result: '$[?(@.["ab"] == 5)].id'
---
test case: macro (\b") in subexpression $[?(@.["a{#M}"] == 5)].id
in:
  path: '$[?(@.["a{#M}"] == 5)].id'
  value: '\b"'
out:
  result: '$[?(@.["a\\b\""] == 5)].id'
...
